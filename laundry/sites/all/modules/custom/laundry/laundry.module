<?php



/**
 * Implements hook_menu()
 */

function laundry_menu() {
  $items = array();

  $items['laundry/invoice/print/%node'] = array(
    'title' => 'Invoice in HTML print format',
    'page callback' => '_laundry_invoice_view_print',
    'page arguments' => array(3),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );

  return $items;
}



/**
 * printing callback
 * @return [type] [description]
 */
function _laundry_invoice_view_print($order) {
  return   _laundry_invoice_get_html($order);
  //drupal_exit();
}


/**
 * pdf printing callback
 */

function _laundry_invoice_view_pdf() {

}



/**
 * printing callback
 * @return [type] [description]
 */
function _laundry_test_invoice_view_print($invoice_number) {
  return  _laundry_test_invoice_get_html($invoice_number);
}


/**
 * Helper function to get the invoice in HTML format
 *
 * @param integer $invoice_number
 * @param object  $node
 * @param string  $type
 */
function _laundry_invoice_get_html($node, $type = 'print') {


  $html = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"'
    . ' "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">' . "\n";
  $html .= '<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en" dir="ltr">' . "\n";
  $html .= '<head>' . "\n";
  $html .= '<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />' ."\n";

  $protocol = _laundry_invoice_get_transfer_protocol() . '://';
  $stylesheetPath = drupal_get_path('module', 'laundry')
      . '/templates/default.css';

  if ($type == 'pdf') {
    $html .= '<style type="text/css">';
    $html .= "\n". file_get_contents(DRUPAL_ROOT . '/' . $stylesheetPath) ."\n";
    $html .= '</style>' ."\n";
  }  else {
    $html .= '<link type="text/css" rel="stylesheet" media="all" href="' . $protocol
      . $_SERVER['HTTP_HOST'] . base_path() . $stylesheetPath .'" />' . "\n";
  }

  $html .= '</head><body class="' . $type . '">';

  $html .= theme('invoice_body', array('node' => $node, 'type' => $type));

  // The eurosign is not supported as applicable character, so replace it with a ascii code
  //$html = str_replace('â‚¬', '&#0128;', $html);

  $html .= '</body></html>';
  return $html;
}


/**
 * Returns the current transfer protocol HTTP or HTTPS
 */
function _laundry_invoice_get_transfer_protocol() {
  return isset($_SERVER["HTTPS"]) && $_SERVER["HTTPS"] == 'on' ? 'https' : 'http';
}


/**
 * Implements hook_theme()
 *
 * @param  array $existing
 * @param  string $type
 * @param  string $theme
 * @param  string $path
 * @return array
 */
function laundry_theme($existing, $type, $theme, $path) {
  return array(
    'invoice_body' => array(
      'variables' => array('node' => NULL, 'type' => NULL),
    )
  );
}



/**
 * Theme function for displaying the invoice
 */
function theme_invoice_body($variables) {
  $node = $variables['node'];
  #$type = $variables['type'];

  $content = '<div class="invoice-wrapper">';

  require_once dirname(__FILE__) . '/templates/default.inc';
  drupal_add_css(drupal_get_path('module', 'laundry') . '/templates/default.css');

  $content_function = '_laundry_invoice_default_get_template_output';
  $content .= $content_function($node);
  $content .= '</div>';

  return $content;
}


function _laundry_test_invoice_get_html($node) {

}


/**
 * Implements hook_view()
 *
 * @param object $node
 * @param string $view_mode
 */
function laundry_node_view($node, $view_mode) {

  switch ($node->type) {
    case 'order':
      $node->content['invoice_links'] = array(
          '#type' => 'link',
          '#title' => t('Generate Invoice'),
          '#href' => 'laundry/invoice/print/' .$node->nid,
          '#weight' => 100
        );
      break;

    default:
      # code...
      break;
  }
  return $node;
}
/**
 * Implements hook_entity_info_alter().
 */
function laundry_entity_info_alter(&$entity_info) {
  if (isset($entity_info['user'])) {
    $entity_info['user']['inline entity form'] = array(
      'controller' => 'UserInlineEntityFormController',
    );
  }

}
